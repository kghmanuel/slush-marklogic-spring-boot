buildscript {
    // Load MarkLogic properties from the Spring Boot properties file to avoid duplication
    Properties props = new Properties()
    props.load(new FileInputStream("src/main/resources/application.properties"))
    props.each { prop ->
        // Don't set the property if it's already been set, e.g. via -P on the command line
        if (prop.key.startsWith("ml") && !project.hasProperty(prop.key)) {
            project.ext.set(prop.key, prop.value)
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
    }
}

plugins {
    id "java"
    id "eclipse"
    id "com.marklogic.ml-gradle" version "2.2.0"

    // For managing environment-sensitive properties - see https://github.com/stevesaliman/gradle-properties-plugin
    // id 'net.saliman.properties' version '1.4.5'
}

apply plugin: 'spring-boot'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()

    // Needed for mlcp and its Hadoop dependencies
    maven { url "http://developer.marklogic.com/maven2/" }
    maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
    // Exclude log4j so that only logback is used for logging
    compile.exclude module:'log4j'
    compile.exclude module:'slf4j-log4j12'

    corb

    // Allows for downloading mlcp dependencies instead of downloading all of mlcp and setting it up yourself
    mlcp
}

dependencies {
    // Main Boot library for running a webapp
    compile("org.springframework.boot:spring-boot-starter-web")

    // Adds Spring Security integration
    compile("org.springframework.boot:spring-boot-starter-security")

    // Adds Thymeleaf integration; Thymeleaf is used for the main HTML templates
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    // Optional Boot library - see https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    compile("org.springframework.boot:spring-boot-devtools")

    // Provides integration points between Boot and MarkLogic
    compile "com.marklogic:marklogic-spring-web:0.1.2"

    // Needed for loading modules into MarkLogic
    compile "com.marklogic:ml-javaclient-util:2.9.0"

    // Needed for the Upload feature using mlcp
    compile "com.marklogic:mlcp-util:0.2.0"
    runtime "commons-fileupload:commons-fileupload:1.3.1"

    // Needed for writing JUnit tests with ml-junit
    testCompile "com.marklogic:ml-junit:2.6.0"

    // For Gradle tasks that run corb jobs
    corb "com.marklogic:marklogic-corb:2.3.1"

    // The mlcp directory contains a log4j config file, which mlcp needs for logging
    mlcp "com.marklogic:mlcp:8.0-5"
    mlcp files("mlcp")

    // For HTTP response compression
    compile ("com.github.ziplet:ziplet:2.2.0"){
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
}

// Tell Spring Boot, when run by Gradle, to watch the resources directory
bootRun {
    addResources = true
}

// See http://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html
springBoot {
    executable = true
    mainClass = "org.example.App"
    excludeDevtools = true
}

/**
 * Example mlcp import task. MlcpTask defines a number of mlcp options as task properties.
 * You can always pass in mlcp args via the args array.
 * Before running this, make sure the input directory exists.
 *
 * Also, Windows users will see mlcp report an IOException about winutils.exe missing, but
 * that can be safely ignored.
 *
 * For more examples, see https://github.com/rjrudin/ml-gradle/tree/master/examples/mlcp-project .
 */
task importData(type: ImportTask) {
    input_file_path = "data"
    output_uri_replace = "(.)+/data,''"
    output_collections = "data"
    args = []
}

/**
 * Example of further simplifying mlcp import tasks by defining some properties.
 * MlcpTask extends Gradle's JavaExec task, so all of JavaExec's properties are available.
 */
class ImportTask extends com.marklogic.gradle.task.MlcpTask {
    @TaskAction
    @Override
    public void exec() {
        setClasspath(project.configurations.mlcp)
        setCommand("IMPORT")
        setPort(project.mlAppConfig.restPort)
        setDatabase(project.mlAppConfig.contentDatabaseName)
        super.exec()
    }
}

/**
 * Example Gradle task that runs a corb job. Depends on mlLoadModules so that the modules that it
 * depends on are guaranteed to be present and up-to-date. For more examples, see
 * https://github.com/rjrudin/ml-gradle/tree/master/examples/corb2-project .
 */
task corbRun(type: com.marklogic.gradle.task.CorbTask, dependsOn: ['mlLoadModules']) {
    xccConnectionUri = "xcc://${mlUsername}:${mlPassword}@${mlHost}:${mlRestPort}"
    moduleRoot = "/ext/corb/"
    urisModule = "uris.xqy"
    processModule = "transform.xqy"
}
